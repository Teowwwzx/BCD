generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  username        String            @unique @db.VarChar(50)
  email           String            @unique @db.VarChar(255)
  passwordHash    String            @map("password_hash") @db.VarChar(255)
  f_name          String?           @db.VarChar(100)
  l_name          String?           @db.VarChar(100)
  phone           String?           @db.VarChar(20)
  dob             DateTime?         @db.Date
  profileImageUrl String?           @map("profile_image_url") @db.VarChar(500)
  user_role       user_role_enum?   @default(buyer)
  status          user_status_enum? @default(pending_verification)
  createdAt       DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  tokens          Token[]
  audit_log       audit_log[]
  cartItems       CartItem[]
  coupon_usage    coupon_usage[]
  notifications   Notification[]
  order_items     OrderItem[]
  orders          Order[]
  product_reviews product_reviews[]
  products        Product[]
  user_addresses  user_addresses[]
  user_wallets    user_wallets[]
  wishlist        wishlist[]

  @@index([email], map: "idx_users_email")
  @@index([status], map: "idx_users_status")
  @@index([username], map: "idx_users_username")
  @@map("users")
}

model Token {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  token     String    @unique
  type      TokenType
  expiresAt DateTime  @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

enum TokenType {
  PASSWORD_RESET
  EMAIL_VERIFICATION
}


model Category {
  id                 Int                   @id @default(autoincrement())
  name               String                @unique @db.VarChar(100)
  description        String?
  parent_category_id Int?
  imageUrl           String?               @map("image_url") @db.VarChar(500)
  status             category_status_enum? @default(active)
  sortOrder          Int?                  @default(0) @map("sort_order")
  createdAt          DateTime?             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime?             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  categories         Category?             @relation("categoriesTocategories", fields: [parent_category_id], references: [id], onUpdate: NoAction)
  other_categories   Category[]            @relation("categoriesTocategories")
  products           Product[]

  @@map("categories")
}

model Product {
  id                 Int                  @id @default(autoincrement())
  sellerId           Int                  @map("seller_id")
  categoryId         Int?                 @map("category_id")
  name               String               @db.VarChar(255)
  description        String?
  short_desc         String?              @db.VarChar(500)
  sku                String?              @unique @db.VarChar(100)
  price              Decimal              @db.Decimal(18, 8)
  quantity           Int                  @default(0)
  min_order_quant    Int?                 @default(1)
  max_order_quant    Int?
  weightKg           Decimal?             @map("weight_kg") @db.Decimal(8, 3)
  dimensionsLengthCm Decimal?             @map("dimensions_length_cm") @db.Decimal(8, 2)
  dimensionsWidthCm  Decimal?             @map("dimensions_width_cm") @db.Decimal(8, 2)
  dimensionsHeightCm Decimal?             @map("dimensions_height_cm") @db.Decimal(8, 2)
  status             product_status_enum? @default(draft)
  isDigital          Boolean?             @default(false) @map("is_digital")
  taxClass           String?              @default("standard") @map("tax_class") @db.VarChar(50)
  createdAt          DateTime?            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime?            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  cartItems          CartItem[]
  notifications      Notification[]
  orderItems         OrderItem[]
  attributes         ProductAttribute[]
  images             ProductImage[]
  product_reviews    product_reviews[]
  category           Category?            @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: NoAction)
  seller             User                 @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  wishlist           wishlist[]

  @@index([categoryId], map: "idx_products_category_id")
  @@index([sellerId], map: "idx_products_seller_id")
  @@index([status], map: "idx_products_status")
  @@map("products")
}

model ProductImage {
  id         Int       @id @default(autoincrement())
  productId  Int       @map("product_id")
  imageUrl   String    @map("image_url") @db.VarChar(500)
  altText    String?   @map("alt_text") @db.VarChar(255)
  sortOrder  Int?      @default(0) @map("sort_order")
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("product_images")
}

model ProductAttribute {
  id         Int       @id @default(autoincrement())
  productId  Int       @map("product_id")
  attr_name  String    @db.VarChar(100)
  attr_value String    @db.VarChar(255)
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("product_attributes")
}

model CartItem {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  productId Int       @map("product_id")
  quantity  Int       @default(1)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, productId], map: "unique_user_product_cart")
  @@map("cart")
}

model Order {
  id                                                       Int                  @id @default(autoincrement())
  uuid                                                     String               @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  buyer_id                                                 Int
  shippingAddressId                                        Int                  @map("shipping_address_id")
  billingAddressId                                         Int                  @map("billing_address_id")
  payment_id                                               Int?                 @unique
  order_status                                             order_status_enum    @default(pending)
  payment_status                                           payment_status_enum  @default(pending)
  subtotal                                                 Decimal              @db.Decimal(18, 8)
  taxAmount                                                Decimal?             @default(0) @map("tax_amount") @db.Decimal(18, 8)
  shippingAmount                                           Decimal?             @default(0) @map("shipping_amount") @db.Decimal(18, 8)
  discountAmount                                           Decimal?             @default(0) @map("discount_amount") @db.Decimal(18, 8)
  totalAmount                                              Decimal              @map("total_amount") @db.Decimal(18, 8)
  coin_to_usd_rate                                         Decimal?             @db.Decimal(10, 2)
  tx_hash                                                  String?              @unique @db.VarChar(66)
  block_number                                             BigInt?
  createdAt                                                DateTime?            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                                DateTime?            @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  coupon_usage                                             coupon_usage[]
  notifications                                            Notification[]
  orderItems                                               OrderItem[]
  user_addresses_orders_billing_address_idTouser_addresses user_addresses       @relation("orders_billing_address_idTouser_addresses", fields: [billingAddressId], references: [id], onUpdate: NoAction)
  users                                                    User                 @relation(fields: [buyer_id], references: [id], onUpdate: NoAction)
  shippingAddress                                          user_addresses       @relation(fields: [shippingAddressId], references: [id], onUpdate: NoAction)
  paymentTransactions                                      PaymentTransaction[]
  shipments                                                Shipment?

  @@index([buyer_id], map: "idx_orders_buyer_id")
  @@index([createdAt], map: "idx_orders_created_at")
  @@index([order_status], map: "idx_orders_order_status")
  @@index([payment_status], map: "idx_orders_payment_status")
  @@map("orders")
}

model OrderItem {
  id                Int               @id @default(autoincrement())
  orderId           Int               @map("order_id")
  productId         Int?              @map("product_id")
  seller_id         Int
  quantity          Int
  unitPrice         Decimal           @map("unit_price") @db.Decimal(18, 8)
  totalPrice        Decimal           @map("total_price") @db.Decimal(18, 8)
  product_name      String            @db.VarChar(255)
  product_sku       String?           @db.VarChar(100)
  product_image_url String?           @db.VarChar(500)
  createdAt         DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)
  order             Order             @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product           Product?          @relation(fields: [productId], references: [id], onUpdate: NoAction)
  users             User              @relation(fields: [seller_id], references: [id], onUpdate: NoAction)
  product_reviews   product_reviews[]

  @@index([orderId], map: "idx_order_items_order_id")
  @@index([productId], map: "idx_order_items_product_id")
  @@index([seller_id], map: "idx_order_items_seller_id")
  @@map("order_items")
}

model PaymentTransaction {
  id                 Int                     @id @default(autoincrement())
  orderId            Int                     @map("order_id")
  amount             Decimal                 @db.Decimal(18, 8)
  tx_hash            String                  @unique @db.VarChar(255)
  blockNumber        BigInt?                 @map("block_number")
  gasUsed            BigInt?                 @map("gas_used")
  gas_price_gwei     Decimal?                @db.Decimal(18, 8)
  from_address       String                  @db.VarChar(255)
  to_address         String                  @db.VarChar(255)
  status             transaction_status_enum @default(pending)
  confirmation_count Int?                    @default(0)
  payment_method     String?                 @default("blockchain") @db.VarChar(50)
  gateway_response   String?                 @db.Text
  processing_fee     Decimal?                @default(0) @db.Decimal(10, 2)
  createdAt          DateTime?               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime?               @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  confirmedAt       DateTime?               @db.Timestamptz(6)
  order              Order                   @relation(fields: [orderId], references: [id], onUpdate: NoAction)

  @@map("payment_transactions")
}

model Shipment {
  id              Int                   @id @default(autoincrement())
  orderId         Int                   @unique @map("order_id")
  carrier         String?               @db.VarChar(100)
  trackingNumber  String?               @map("tracking_number") @db.VarChar(255)
  shipping_method String?               @db.VarChar(100)
  shipping_cost   Decimal?              @db.Decimal(18, 8)
  weight_kg       Decimal?              @db.Decimal(8, 3)
  status          shipment_status_enum? @default(pending)
  notes           String?
  createdAt       DateTime?             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  order           Order                 @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("shipments")
}

model Coupon {
  id                      Int                @id @default(autoincrement())
  code                    String             @unique @db.VarChar(50)
  description             String?            @db.VarChar(255)
  discount_type           discount_type_enum
  discount_value          Decimal            @db.Decimal(10, 2)
  minimum_order_amount    Decimal?           @db.Decimal(18, 8)
  maximum_discount_amount Decimal?           @db.Decimal(18, 8)
  usageLimit              Int?               @map("usage_limit")
  usage_count             Int?               @default(0)
  user_usage_limit        Int?               @default(1)
  status                  coupon_status_enum @default(active)
  valid_from              DateTime           @db.Timestamptz(6)
  valid_until             DateTime           @db.Timestamptz(6)
  createdAt               DateTime?          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime?          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  coupon_usage            coupon_usage[]

  @@map("coupons")
}

model Notification {
  id                 Int                    @id @default(autoincrement())
  userId             Int                    @map("user_id")
  type               notification_type_enum
  title              String                 @db.VarChar(255)
  message            String
  isRead             Boolean?               @default(false) @map("is_read")
  readAt            DateTime?              @db.Timestamptz(6)
  related_order_id   Int?
  related_product_id Int?
  createdAt          DateTime?              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?              @default(now()) @map("updated_at") @db.Timestamptz(6)
  orders             Order?                 @relation(fields: [related_order_id], references: [id], onUpdate: NoAction)
  products           Product?               @relation(fields: [related_product_id], references: [id], onUpdate: NoAction)
  user               User                   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([isRead], map: "idx_notifications_is_read")
  @@index([userId], map: "idx_notifications_user_id")
  @@map("notifications")
}

model SystemSetting {
  id            Int       @id @default(autoincrement())
  setting_key   String    @unique @db.VarChar(100)
  setting_value String?
  description   String?   @db.VarChar(255)
  isPublic      Boolean?  @default(false) @map("is_public")
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("system_settings")
}

model audit_log {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  action     String    @db.VarChar(100)
  table_name String?   @db.VarChar(100)
  record_id  Int?
  old_values Json?
  new_values Json?
  ip_address String?   @db.Inet
  user_agent String?
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  users      User?     @relation(fields: [user_id], references: [id], onUpdate: NoAction)
}

model coupon_usage {
  id              Int       @id @default(autoincrement())
  coupon_id       Int
  user_id         Int
  order_id        Int
  discount_amount Decimal   @db.Decimal(18, 8)
  usedAt         DateTime? @default(now()) @map("used_at") @db.Timestamptz(6)
  coupons         Coupon    @relation(fields: [coupon_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  orders          Order     @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model product_reviews {
  id                   Int                @id @default(autoincrement())
  product_id           Int
  user_id              Int
  order_item_id        Int?
  rating               Int
  title                String?            @db.VarChar(255)
  review_text          String?
  is_verified_purchase Boolean?           @default(false)
  status               review_status_enum @default(pending)
  helpful_count        Int?               @default(0)
  createdAt           DateTime?          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime?          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  order_items          OrderItem?         @relation(fields: [order_item_id], references: [id], onUpdate: NoAction)
  products             Product            @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                User               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, product_id], map: "unique_user_product_review")
  @@index([product_id], map: "idx_product_reviews_product_id")
  @@index([status], map: "idx_product_reviews_status")
  @@index([user_id], map: "idx_product_reviews_user_id")
}

model user_addresses {
  id                                               Int                @id @default(autoincrement())
  user_id                                          Int
  address_type                                     address_type_enum
  location_type                                    location_type_enum
  is_default                                       Boolean?           @default(false)
  addr_line_1                                      String             @db.VarChar(255)
  addr_line_2                                      String?            @db.VarChar(255)
  city                                             String             @db.VarChar(100)
  state                                            String             @db.VarChar(100)
  postcode                                         String             @db.VarChar(20)
  country                                          String             @db.VarChar(100)
  remark                                           String?
  createdAt                                       DateTime?          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                       DateTime?          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  orders_orders_billing_address_idTouser_addresses Order[]            @relation("orders_billing_address_idTouser_addresses")
  orders                                           Order[]
  users                                            User               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_wallets {
  id          Int       @id @default(autoincrement())
  user_id     Int
  wallet_addr String    @unique @db.VarChar(255)
  is_verified Boolean?  @default(false)
  createdAt  DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime? @default(now()) @db.Timestamptz(6)
  users       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model wishlist {
  id         Int       @id @default(autoincrement())
  user_id    Int
  product_id Int
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  products   Product   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, product_id], map: "unique_user_product_wishlist")
}

model ShippingMethod {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  description String?   @db.VarChar(255)
  baseRate    Decimal   @map("base_rate") @db.Decimal(10, 2)
  perKgRate   Decimal?  @map("per_kg_rate") @db.Decimal(10, 2)
  perKmRate   Decimal?  @map("per_km_rate") @db.Decimal(10, 2)
  minDeliveryDays Int   @map("min_delivery_days")
  maxDeliveryDays Int   @map("max_delivery_days")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("shipping_methods")
}

enum address_type_enum {
  shipping
  billing
}

enum category_status_enum {
  active
  inactive
}

enum coupon_status_enum {
  active
  inactive
  expired
}

enum discount_type_enum {
  percentage
  fixed_amount
}

enum location_type_enum {
  residential
  company
}

enum notification_type_enum {
  order_update
  payment_received
  product_review
  system_message
  promotion
}

enum order_status_enum {
  pending
  confirmed
  processing
  shipped
  delivered
  cancelled
  refunded
}

enum payment_status_enum {
  pending
  paid
  failed
  refunded
  partially_refunded
}

enum product_status_enum {
  published
  draft
  archived
}

enum review_status_enum {
  pending
  approved
  rejected
}

enum shipment_status_enum {
  pending
  picked_up
  in_transit
  out_for_delivery
  delivered
  failed_delivery
  returned
}

enum transaction_status_enum {
  pending
  confirmed
  failed
}

enum user_role_enum {
  buyer
  seller
  admin
}

enum user_status_enum {
  active
  inactive
  suspended
  pending_verification
}
